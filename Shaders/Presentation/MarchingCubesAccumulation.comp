#version 450

const float PI = 3.141592f;
const uint FRAC = 10000;

struct ParticleProperty
{
    uint particleCount;
    float r1;
    float r2;
    float r3;
};

struct MarchingCubesSetup
{
    vec2 xRange;
    vec2 yRange;
    vec2 zRange;
    float voxelInterval;
    float isovalue;

    uvec4 voxelDimension;
    uint voxelCount;

    uvec4 cellDimension;
    uint cellCount;

    uint vertexCount;
    uint indexCount;
};

layout (std430, binding = 0) buffer ParticlePropertyInSSBO
{
    ParticleProperty property;
};

layout (std430, binding = 1) buffer SetupInSSBO
{
    MarchingCubesSetup setup;
};

// Input positions
layout (std430, binding = 2) buffer PositionInSSBO
{
    vec3 positions[];
};

layout (std430, binding = 3) buffer VoxelSSBO
{
    uint voxelDensities[];
};

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

float Kernel(float dist)
{
    if (dist >= property.r1)
    {
        return 0.0f;
    }
    else
    {
        float x = 1.0f - dist * dist / property.r2;
        return (315.0f * x * x * x) / (64.0f * PI * property.r3);
    }
}

uint GetLinearIndex(uvec3 volumeIndex, uvec3 dimension)
{
    return volumeIndex.z * (dimension.x * dimension.y) + volumeIndex.y * (dimension.x) + volumeIndex.x;
}

void main() 
{
    // An invocation deals with a single particle
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= property.particleCount) return;

    vec3 particlePosition = positions[particleIndex];
    if (particlePosition.x < setup.xRange.x || particlePosition.x > setup.xRange.y) return;
    if (particlePosition.y < setup.yRange.x || particlePosition.y > setup.yRange.y) return;
    if (particlePosition.z < setup.zRange.x || particlePosition.z > setup.zRange.y) return;

    // Get voxel ranges
    vec3 relativePosition = particlePosition - vec3(setup.xRange.x, setup.yRange.x, setup.zRange.x);

    uint voxelIndexMinX = max(int((relativePosition.x - property.r1) / setup.voxelInterval), 0);
    uint voxelIndexMaxX = min(int((relativePosition.x + property.r1) / setup.voxelInterval), setup.voxelDimension.x - 1);

    uint voxelIndexMinY = max(int((relativePosition.y - property.r1) / setup.voxelInterval), 0);
    uint voxelIndexMaxY = min(int((relativePosition.y + property.r1) / setup.voxelInterval), setup.voxelDimension.y - 1);

    uint voxelIndexMinZ = max(int((relativePosition.z - property.r1) / setup.voxelInterval), 0);
    uint voxelIndexMaxZ = min(int((relativePosition.z + property.r1) / setup.voxelInterval), setup.voxelDimension.z - 1);

    // Iterate through adjacent voxels and accumulate kernel values
    vec3 voxelOrigin = vec3(setup.xRange.x, setup.yRange.x, setup.zRange.x);
    for (uint z = voxelIndexMinZ; z <= voxelIndexMaxZ; ++z)
    {
        for (uint y = voxelIndexMinY; y <= voxelIndexMaxY; ++y)
        {
            for (uint x = voxelIndexMinX; x <= voxelIndexMaxX; ++x)
            {
                uvec3 voxelVolumeIndex = uvec3(x, y, z);
                vec3 voxelPosition = voxelOrigin + voxelVolumeIndex * setup.voxelInterval;
                float dist = distance(particlePosition, voxelPosition);

                uint kernelValue = uint(Kernel(dist) * FRAC);
                uint voxelLinearIndex = GetLinearIndex(voxelVolumeIndex, setup.voxelDimension.xyz);
                atomicAdd(voxelDensities[voxelLinearIndex], kernelValue);
            }
        }
    }
}