#version 450

const uint NORMAL_GROUP_COUNT= 4;

struct MarchingCubesSetup
{
    vec2 xRange;
    vec2 yRange;
    vec2 zRange;
    float voxelInterval;
    float isovalue;

    uvec4 voxelDimension;
    uint voxelCount;

    uvec4 cellDimension;
    uint cellCount;

    uint vertexCount;
    uint indexCount;
};

struct Vertex
{
	vec3 pos;
	vec3 normal;
	vec2 texCoord;
};

// ========== Inputs ==========
layout (std430, binding = 0) buffer SetupSSBO
{
    MarchingCubesSetup setup;
};

layout (std430, binding = 1) buffer VoxelInSSBO
{
    uint voxelDensities[];
};

layout (std430, binding = 2) buffer VertexPositionInSSBO 
{
   vec3 vertexPositions[];
};

layout (std430, binding = 3) buffer NormalInSSBO
{
    vec3 normals[];
};

// ========== Outputs ==========
layout (std430, binding = 4) buffer VertexOutSSBO 
{
    Vertex vertices[];
};

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main()
{
    // This invocation deals with a single vertex.
    // However, it is guaranteed that the number of voxels is less than that of vertices.
    // Hence, just reset voxels in this stage
    uint voxelIndex = gl_GlobalInvocationID.x;
    if (voxelIndex < setup.voxelCount)
    {
        voxelDensities[voxelIndex] = 0;
    }

    // This invocation deals with a single vertex (single entry vertexPositions and vertices)
    uint vertexIndex = gl_GlobalInvocationID.x;
    if (vertexIndex >= setup.vertexCount) return;

    vec3 vertexPosition = vertexPositions[vertexIndex];
    vertices[vertexIndex].pos = vertexPosition;

    uint normalStart = vertexIndex * NORMAL_GROUP_COUNT;
    vec3 normal = vec3(0.0f, 0.0f, 0.0f);
    for (uint i = 0; i < NORMAL_GROUP_COUNT; ++i)
    {
        normal += normals[normalStart + i]; // Accumulate normals
        normals[normalStart + i] = vec3(0.0f, 0.0f, 0.0f); // Reset
    }
    vertices[vertexIndex].normal = normalize(normal);

    vertices[vertexIndex].texCoord = vec2(0.0f, 0.0f);
}