#version 450

struct SimulationSetup
{
    uint particleCount;
};

// ========== Inputs ==========
layout (std430, binding = 0) buffer SimulationSetupInSSBO
{
    SimulationSetup simulationSetup;
};

layout (std430, binding = 1) buffer HashResultInSSBO
{
	uint hashResults[]; // [# of particles]
};

// ========== Outputs ==========
layout (std430, binding = 2) buffer AccumulationInOutSSBO
{
	// After this stage, the accumulations will contain exclusive end indices of each bucket 
    uint accumulations[]; // [# of buckets]
};

layout (std430, binding = 3) buffer BucketOutSSBO
{
	uint buckets[]; // [# of particles]
};

// ========== Execution ==========
layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main()
{
	uint particleIndex = gl_GlobalInvocationID.x;
	if (particleIndex >= simulationSetup.particleCount) return;

	uint hashKey = hashResults[particleIndex];
	uint entry = atomicAdd(accumulations[hashKey], 1);
	buckets[entry] = particleIndex;
}