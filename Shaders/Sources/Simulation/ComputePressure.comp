#version 450

struct SimulationSetup
{
    uint particleCount;
};

struct GridSetup
{
    uvec4 dimension;
};

struct SimulationParameters
{
	float particleRadius;
	float particleMass;

	float timeStep;

	vec4 gravitiy;

	float targetDensity;
	float soundSpeed;
	float eosExponent;
	float kernelRadiusFactor;

	float dragCoefficient;
	float viscosityCoefficient;
	float restitutionCoefficient;
	float frictionCoefficient;
};

// ========== Inputs ==========
layout (std430, binding = 0) buffer SimulationSetupInSSBO
{
    SimulationSetup simulationSetup;
};

layout (std430, binding = 1) buffer GridSetupInSSBO
{
    GridSetup gridSetup;
};

layout (std430, binding = 2) buffer PositionInSSBO
{
    vec3 positions[];
};

layout (std430, binding = 3) buffer SimulationParametersInSSBO
{
    SimulationParameters simulationParameters;
};

layout (std430, binding = 4) buffer DensityInSSBO
{
    float densities[];
};

// ========== Outputs ==========
layout (std430, binding = 5) buffer PressureOutSSBO
{
    float pressures[];
};

// ========== Execution ==========
layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

float ComputePressureFromEOS(float density, float targetDensity, float eosScale, float eosExponent)
{
	float pressure = eosScale * (pow(density / targetDensity, eosExponent) - 1.0f) / eosExponent;
	if (pressure < 0.0f) pressure = 0.0f;
	return pressure;
}

void main() 
{
	uint particleIndex = gl_GlobalInvocationID.x;
	if (particleIndex >= simulationSetup.particleCount) return;

	float eosScale = simulationParameters.targetDensity * (simulationParameters.soundSpeed * simulationParameters.soundSpeed) / simulationParameters.eosExponent;
	pressures[particleIndex] = ComputePressureFromEOS(densities[particleIndex], simulationParameters.targetDensity, eosScale, simulationParameters.eosExponent);
}