#version 450

struct Vertex
{
	vec3 pos;
	vec3 normal;
	vec2 texCoord;
};

// Input positions
layout (binding = 0) uniform ParticleCountInUBO 
{
    uint particleCount;
} 
ubo;

layout (std430, binding = 1) buffer PositionInSSBO
{
    vec3 positions[];
};

// Output
layout (std430, binding = 2) buffer VertexOutSSBO 
{
    Vertex vertices[];
};

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    // An invocation deals with a single particle
    uint id = gl_GlobalInvocationID.x;
    if (id >= ubo.particleCount) return;

    vertices[id * 4 + 0].pos = positions[id];
    vertices[id * 4 + 1].pos = positions[id];
    vertices[id * 4 + 2].pos = positions[id];
    vertices[id * 4 + 3].pos = positions[id];
}